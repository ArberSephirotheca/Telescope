# Fragment used by the two variants of the Developers query to get user info.
fragment UserInfo on users {
    id
    first_name
    last_name

    # Role is removed for now since we don't use it anywhere
    #role

    # RCS ID if available
    rcs_id: userAccountsByUserId(where: {type: {_eq: "rpi"}}) {
        account_id
    }

    # Semesters coordinating
    coordinating: enrollmentsByUserId(
        where: {
            is_coordinator: {_eq: true}
        },
        order_by: [
            {semester: {start_date: desc}}
        ]
    ) {
        semester {
            title
        }
    }

    # Semesters mentoring
    mentoring: smallGroupMentorsByUserId(order_by: [
        {small_group: {semester: {start_date: desc}}}
    ]) {
        small_group {
            title
            semester {
                title
            }
        }
    }
}

# Developers Page Query (including older developers)
query AllDevelopers(
    $limit: Int!,
    $offset: Int!,
    $search: String!,
) {
    # Count of users to determine the number of pages
    user_count: users_aggregate(where: {
        _or: [
            {first_name: {_ilike: $search}},
            {last_name: {_ilike: $search}},
            {userAccountsByUserId: {account_id: {_ilike: $search}, type: {_eq: "rpi"}}},
        ]
    }) {
        aggregate {
            count
        }
    }

    users(
        limit: $limit,
        offset: $offset,
        where: {_or: [
            {first_name: {_ilike: $search}},
            {last_name: {_ilike: $search}},
            {userAccountsByUserId: {account_id: {_ilike: $search}, type: {_eq: "rpi"}}},
        ]},
        order_by: [{first_name: asc}, {last_name: asc}]
    ) {...UserInfo}
}

# Separate query to get list of (current) developers for the developers page.
query CurrentDevelopers(
    $limit: Int!,
    $offset: Int!,
    $search: String!,
    $now: date!,
) {
    # Current user count -- used to determine the number of pages.
    user_count: users_aggregate(where: {
        enrollmentsByUserId: {semester: {
            start_date: {_lte: $now}
            end_date: {_gte: $now}
        }},
        _or: [
            {first_name: {_ilike: $search}},
            {last_name: {_ilike: $search}},
            {userAccountsByUserId: {account_id: {_ilike: $search}, type: {_eq: "rpi"}}},
        ]
    }) { aggregate { count } }

    users(
        limit: $limit,
        offset: $offset,
        where: {
            enrollmentsByUserId: {semester: {
                start_date: {_lte: $now}
                end_date: {_gte: $now}
            }},
            _or: [
                {first_name: {_ilike: $search}},
                {last_name: {_ilike: $search}},
                {userAccountsByUserId: {account_id: {_ilike: $search}, type: {_eq: "rpi"}}},
            ]
        }
        order_by: [{first_name: asc}, {last_name: asc}]
    ) {... UserInfo}
}
